
R version 2.14.0 (2011-10-31)
Copyright (C) 2011 The R Foundation for Statistical Computing
ISBN 3-900051-07-0
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ###
> # check gamboostLSS()
> 
> require("gamboostLSS")
Loading required package: gamboostLSS
Loading required package: splines
Loading required package: survival
Loading required package: mboost
> 
> set.seed(1907)
> x1 <- rnorm(1000)
> x2 <- rnorm(1000)
> x3 <- rnorm(1000)
> x4 <- rnorm(1000)
> x5 <- rnorm(1000)
> x6 <- rnorm(1000)
> mu    <- exp(1.5 + 0.3 * x1^2 + 0.5 * x2 - 3 * sin(x3) -1 * x4)
> sigma <- exp(-0.2 * x4 +0.2 * x5 +0.4 * x6)
> y <- numeric(1000)
> for( i in 1:1000)
+     y[i] <- rnbinom(1, size = sigma[i], mu = mu[i])
> dat <- data.frame(x1, x2, x3, x4, x5, x6, y)
> 
> model <- gamboostLSS(y ~ ., families = NBinomialLSS(), data = dat,
+                      control = boost_control(mstop = 200))
> 
> coef(model)
$mu
$mu$`bbs(x1, df = dfbase)`
         1          2          3          4          5          6          7 
 1.2971172  1.0532318  0.8139956  0.5808179  0.3491188  0.1160861 -0.1033143 
         8          9         10         11         12         13         14 
-0.2837009 -0.4035091 -0.4579981 -0.4528539 -0.3873579 -0.2584219 -0.0755918 
        15         16         17         18         19         20         21 
 0.1274435  0.3192713  0.5067138  0.6944657  0.8813062  1.0721098  1.2675418 
        22         23         24 
 1.4641750  1.6597033  1.8545478 

$mu$`bbs(x2, df = dfbase)`
          1           2           3           4           5           6 
-0.34293433 -0.33645602 -0.32995189 -0.32338178 -0.31654171 -0.30895144 
          7           8           9          10          11          12 
-0.29994230 -0.28902355 -0.27635598 -0.26412585 -0.25256431 -0.23569485 
         13          14          15          16          17          18 
-0.20781495 -0.16490343 -0.10140017 -0.01519427  0.09208308  0.21558555 
         19          20          21          22          23          24 
 0.34037970  0.45262885  0.55463388  0.65138280  0.74488809  0.83777601 

$mu$`bbs(x3, df = dfbase)`
         1          2          3          4          5          6          7 
 0.1055910  0.4143312  0.7190749  1.0138564  1.2867387  1.5126106  1.6343790 
         8          9         10         11         12         13         14 
 1.5654949  1.2377658  0.7068044  0.0496445 -0.6142261 -1.1471188 -1.4808817 
        15         16         17         18         19         20         21 
-1.6205371 -1.6254158 -1.5562273 -1.4525661 -1.3343223 -1.2077690 -1.0752900 
        22         23         24 
-0.9382224 -0.7982990 -0.6579890 

$mu$`bbs(x4, df = dfbase)`
          1           2           3           4           5           6 
 2.55339775  2.21497923  1.89230287  1.59696473  1.33694524  1.11336567 
          7           8           9          10          11          12 
 0.91587829  0.73107510  0.53954830  0.31623307  0.05139456 -0.21620234 
         13          14          15          16          17          18 
-0.43285374 -0.58462388 -0.68639185 -0.74947758 -0.78087592 -0.79257359 
         19          20          21          22          23          24 
-0.79368854 -0.78936322 -0.78285998 -0.77560547 -0.76823890 -0.76085288 

attr(,"offset")
[1] 4.055466

$sigma
$sigma$`bbs(x1, df = dfbase)`
           1            2            3            4            5            6 
-0.016576160 -0.013821252 -0.010956286 -0.007513993 -0.001932061  0.006574527 
           7            8            9           10           11           12 
 0.016217099  0.023529139  0.025280378  0.021631020  0.016227919  0.010358403 
          13           14           15           16           17           18 
 0.005008312  0.002694950  0.005086878  0.012981326  0.024482111  0.038520077 
          19           20           21           22           23           24 
 0.054333668  0.071432268  0.089367452  0.107815597  0.126616987  0.145596272 

$sigma$`bbs(x2, df = dfbase)`
          1           2           3           4           5           6 
-1.11099609 -1.00350526 -0.89342220 -0.77815295 -0.65510590 -0.52303217 
          7           8           9          10          11          12 
-0.38648276 -0.25883594 -0.15782719 -0.07977470 -0.01080798  0.05303267 
         13          14          15          16          17          18 
 0.11992016  0.19139077  0.24922837  0.27717030  0.26590900  0.23836601 
         19          20          21          22          23          24 
 0.22134849  0.24093876  0.29637213  0.37514816  0.46722289  0.56320116 

$sigma$`bbs(x3, df = dfbase)`
          1           2           3           4           5           6 
 0.29542672  0.41260928  0.52515604  0.62732069  0.71229818  0.77848646 
          7           8           9          10          11          12 
 0.83031049  0.87914631  0.93370647  0.95164822  0.89994101  0.72766645 
         13          14          15          16          17          18 
 0.41562026  0.03145318 -0.35245136 -0.67882086 -0.89293540 -0.98806609 
         19          20          21          22          23          24 
-0.97984831 -0.89133222 -0.74588703 -0.56354541 -0.36095124 -0.15019384 

$sigma$`bbs(x4, df = dfbase)`
          1           2           3           4           5           6 
 0.85754196  0.90871548  0.94804742  0.96668567  0.95816890  0.91746410 
          7           8           9          10          11          12 
 0.84227396  0.73217225  0.60755830  0.50037223  0.42339375  0.35188017 
         13          14          15          16          17          18 
 0.24620158  0.10434582 -0.06176726 -0.24393227 -0.41843687 -0.57276195 
         19          20          21          22          23          24 
-0.71442486 -0.85296902 -0.99817798 -1.14878456 -1.30221435 -1.45764813 

$sigma$`bbs(x5, df = dfbase)`
            1             2             3             4             5 
-8.788430e-04 -2.009916e-03 -3.042522e-03 -3.890058e-03 -4.438325e-03 
            6             7             8             9            10 
-4.404461e-03 -3.655438e-03 -2.435015e-03 -1.186867e-03 -4.026654e-05 
           11            12            13            14            15 
 1.277376e-03  3.271644e-03  6.023660e-03  9.268491e-03  1.239142e-02 
           16            17            18            19            20 
 1.505661e-02  1.695503e-02  1.833440e-02  1.970746e-02  2.123186e-02 
           21            22            23            24 
 2.297728e-02  2.501926e-02  2.720845e-02  2.942673e-02 

$sigma$`bbs(x6, df = dfbase)`
          1           2           3           4           5           6 
-0.08466278 -0.12190270 -0.15753978 -0.18652265 -0.19764846 -0.18684705 
          7           8           9          10          11          12 
-0.15350106 -0.09600769 -0.01826186  0.06168919  0.12594522  0.16916998 
         13          14          15          16          17          18 
 0.19752623  0.21137392  0.20883867  0.19996012  0.19724276  0.20248899 
         19          20          21          22          23          24 
 0.21329245  0.23090552  0.25575755  0.28540294  0.31711397  0.34958959 

attr(,"offset")
[1] -1.650591

> 
> par(mfrow = c(3,2))
> plot(dat$x3, fitted(model$mu, which = "x3"), main = "mu")
> lines(sort(dat$x3), - 3 * sin(dat$x3)[order(dat$x3)], col = "red")
> plot(dat$x3, fitted(model$sigma, which = "x3"), main = "sigma")
> lines(sort(dat$x3), - 3 * sin(dat$x3)[order(dat$x3)], col = "red")
> 
> model[400]

	 LSS Models fitted via Model-based Boosting

Call:
gamboostLSS(formula = y ~ ., data = dat, families = NBinomialLSS(),     control = boost_control(mstop = 200))

Number of boosting iterations: mstop = 400 400 
Step size:  0.1 

Families:

	 Negative Negative-Binomial Likelihood: mu (log link) 

Loss function: -(lgamma(y + sigma) - lgamma(sigma) - lgamma(y + 1) + sigma *  
     log(sigma) + y * f - (y + sigma) * log(exp(f) + sigma)) 
 

	 Negative Negative-Binomial Likelihood: sigma (log link) 

Loss function: -(lgamma(y + exp(f)) - lgamma(exp(f)) - lgamma(y + 1) + exp(f) *  
     f + y * log(mu) - (y + exp(f)) * log(mu + exp(f))) 
 
> plot(dat$x3, fitted(model$mu, which = "x3"), main = "mu")
> lines(sort(dat$x3), - 3 * sin(dat$x3)[order(dat$x3)], col = "red")
> plot(dat$x3, fitted(model$sigma, which = "x3"), main = "sigma")
> lines(sort(dat$x3), - 3 * sin(dat$x3)[order(dat$x3)], col = "red")
> 
> model[600]

	 LSS Models fitted via Model-based Boosting

Call:
gamboostLSS(formula = y ~ ., data = dat, families = NBinomialLSS(),     control = boost_control(mstop = 200))

Number of boosting iterations: mstop = 600 600 
Step size:  0.1 

Families:

	 Negative Negative-Binomial Likelihood: mu (log link) 

Loss function: -(lgamma(y + sigma) - lgamma(sigma) - lgamma(y + 1) + sigma *  
     log(sigma) + y * f - (y + sigma) * log(exp(f) + sigma)) 
 

	 Negative Negative-Binomial Likelihood: sigma (log link) 

Loss function: -(lgamma(y + exp(f)) - lgamma(exp(f)) - lgamma(y + 1) + exp(f) *  
     f + y * log(mu) - (y + exp(f)) * log(mu + exp(f))) 
 
> plot(dat$x3, fitted(model$mu, which = "x3"), main = "mu")
> lines(sort(dat$x3), - 3 * sin(dat$x3)[order(dat$x3)], col = "red")
> plot(dat$x3, fitted(model$sigma, which = "x3"), main = "sigma")
> lines(sort(dat$x3), - 3 * sin(dat$x3)[order(dat$x3)], col = "red")
> 
